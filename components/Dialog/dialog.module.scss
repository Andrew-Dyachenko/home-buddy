@use "sass:color";
@use "@sass-fairy/math/math";
@use "../../src/styles/conf";
@use "../../src/styles/conf/fibonacci";
@use "../../src/styles/func";
@use "../../src/styles/mix";

.dialog {
	$-bgc: conf.$body-bg;

	@include mix.isomorphic-color-contrast(
		$-bgc,
		conf.$body-color,
		color.invert(conf.$body-color, 100%)
	);

	position: fixed;
	border: 0;
	top: 0;
	right: 0;
	bottom: 0;
	left: 0;
	width: 100%;
	height: 100%;
	padding: 0;
	background-color: $-bgc;

	@media (prefers-color-scheme: dark) {
		background-color: conf.$body-bg--dark;

		@include mix.isomorphic-color-contrast(
			conf.$body-bg--dark,
			conf.$body-color,
			color.invert(conf.$body-color, 100%)
		);
	}

	&__hug {
		display: flex;
		flex-direction: column;
		height: 100%;
	}

	&__container {
		&--header {
			display: flex;
			flex-grow: 1;
			align-items: center;
			column-gap: math.div(conf.$grid-gutter-width, 2);

			@media (min-width: #{conf.$xxs + 1}) and (max-width: #{conf.$xl - 1}) {
				column-gap: func.fluid(
					math.div(conf.$grid-gutter-width, 2),
					conf.$grid-gutter-width,
					conf.$xxs,
					conf.$xl
				);
			}

			@media (min-width: conf.$xl) {
				column-gap: conf.$grid-gutter-width;
			}
		}

		&--body {
			display: flex;
			flex-wrap: wrap;
			// flex-direction: column;
			row-gap: math.div(conf.$grid-gutter-width, 2);

			padding-top: conf.$global-padding * 1.5;
			padding-bottom: conf.$global-padding * 1.5;

			@media (min-width: #{conf.$xxs + 1}) and (max-width: #{conf.$xl - 1}) {
				padding-top: func.fluid(
					conf.$global-padding * 1.5,
					conf.$global-padding * 6,
					conf.$xxs,
					conf.$xl
				);
				row-gap: func.fluid(
					math.div(conf.$grid-gutter-width, 2),
					conf.$grid-gutter-width * 0.75,
					conf.$xxs,
					conf.$xl
				);
			}

			@media (min-width: conf.$xl) {
				padding-top: conf.$global-padding * 6;
				row-gap: conf.$grid-gutter-width * 0.75;
			}
		}
	}

	&__dismiss {
		$-dismiss: &;

		$-color: conf.$boulder;

		display: flex;
		flex-shrink: 0;
		border: 0;
		background: none;
		color: $-color;
		padding: 0;
		font-size: 1rem;

		@at-root :root:not([dir="rtl"]) & {
			margin-left: auto;
		}

		@at-root :root[dir="rtl"] & {
			margin-right: auto;
		}

		&:hover,
		&:focus {
			@include mix.isomorphic-color-contrast(
				$-bgc,
				color.change($-color, $lightness: 40%),
				color.invert(color.change($-color, $lightness: 40%), 100%),
				color,
				3
			);
		}

		&:not(:active) {
			#{$-dismiss} {
				&-icon {
					@media (prefers-reduced-motion: no-preference) {
						transition-property: color;
						transition-duration: var(--animation-duration);
						transition-timing-function: var(
							--animation-timing-function
						);
					}
				}
			}
		}

		&:active {
			@include mix.isomorphic-color-contrast(
				$-bgc,
				color.change($-color, $lightness: 30%),
				color.invert(color.change($-color, $lightness: 30%), 100%),
				color,
				3
			);
		}

		&-icon {
			color: inherit;
		}
	}

	&__header {
		display: flex;
		position: relative;
		min-height: 60px;
		border-width: 0 0 4px;
		border-style: solid;
		padding: 16px;

		@if (math.unitless(color.blackness($-bgc)) > 50) {
			border-color: color.change(
				conf.$selago,
				$blackness: 90%,
				$whiteness: 10%
			);
		} @else {
			border-color: conf.$selago;
		}

		@media (min-width: #{conf.$xxs + 1}) and (max-width: #{conf.$xl - 1}) {
			min-height: func.fluid(60px, 76px, conf.$xxs, conf.$xl);
		}

		@media (min-width: conf.$xl) {
			min-height: 76px;
		}

		&-title {
			margin: 0;
			flex-grow: 1;
		}
	}

	&__body {
		display: flex;
		flex-direction: column;
		flex-grow: 1;
	}

	&__progress {
		position: absolute;
		top: 100%;
		left: 0;
		right: 0;
		width: 100%;
		height: 4px;

		@if (math.unitless(color.blackness($-bgc)) > 50) {
			background-color: color.change(
				conf.$selago,
				$blackness: fibonacci.$asymp-xxxl-percentage,
				$whiteness: fibonacci.$asymp-xxl-percentage
			);
		} @else {
			background-color: conf.$selago;
		}

		@media (prefers-color-scheme: dark) {
			@if (math.unitless(color.blackness(conf.$body-bg--dark)) > 50) {
				background-color: color.change(
					conf.$selago,
					$blackness: fibonacci.$asymp-xxxl-percentage,
					$whiteness: fibonacci.$asymp-xxl-percentage
				);
			} @else {
				background-color: conf.$selago;
			}
		}

		&-bar {
			background-color: conf.$lima;
			height: 100%;

			@media (prefers-reduced-motion: no-preference) {
				transition-property: width;
				transition-duration: var(--animation-duration);
				transition-timing-function: var(--animation-timing-function);
			}
		}
	}

	&__output {
		text-align: center;
		flex-grow: 1;
		width: 100%;
		margin: 0;
		font-weight: 500;
		font-size: math.div(14, 16) + 0rem;
		line-height: math.div(20, 14);

		strong {
			font-weight: 700;
		}
	}

	&__title {
		$-fs--xxs: math.div(23, 16) + 0rem;
		$-fs--xl: math.div(25, 16) + 0rem;
		$-lh--xxs: math.div(32, 23);
		$-lh--xl: math.div(36, 25);

		font-weight: 700;
		font-size: $-fs--xxs;
		line-height: $-lh--xxs;
		text-align: center;
		margin: 0;
		flex-grow: 1;
		width: 100%;

		@media (min-width: #{conf.$xxs + 1}) and (max-width: #{conf.$xl - 1}) {
			// Smooth font-size change according to layout
			font-size: func.fluid(
				math.unitless($-fs--xxs) * conf.$font-size-root,
				math.unitless($-fs--xl) * conf.$font-size-root,
				conf.$xxs,
				conf.$xl
			);

			// Smooth line-height change according to layout
			line-height: func.fluid(
				(math.unitless($-fs--xxs) * $-lh--xxs) * conf.$font-size-root,
				(math.unitless($-fs--xl) * $-lh--xl) * conf.$font-size-root,
				conf.$xxs,
				conf.$xl
			);
		}

		@media (min-width: conf.$xl) {
			font-size: $-fs--xl;
			line-height: $-lh--xl;
		}
	}

	&__form {
		margin: 0 auto;
		// width: 100%;

		&--yesno {
			@media (max-width: conf.$xxs) {
				flex-basis: 343px;
			}

			@media (min-width: #{conf.$xxs + 1}) and (max-width: #{conf.$s - 1}) {
				flex-basis: func.fluid(343px, 352px, conf.$xxs, conf.$s);
			}

			@media (min-width: conf.$s) {
				flex-basis: 352px;
			}
		}

		&--user {
			@media (max-width: conf.$xxs) {
				flex-basis: 343px;
			}

			@media (min-width: #{conf.$xxs + 1}) and (max-width: #{conf.$s - 1}) {
				flex-basis: func.fluid(343px, 250px, conf.$xxs, conf.$s);
			}

			@media (min-width: conf.$s) {
				flex-basis: 250px;
			}
		}
	}
}
