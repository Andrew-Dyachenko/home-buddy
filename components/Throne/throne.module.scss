@use "sass:color";
@use "@sass-fairy/math/math";
@use "../../src/styles/conf";
@use "../../src/styles/conf/fibonacci";
@use "../../src/styles/func";
@use "../../src/styles/mix";

.throne {
	$-bgc: conf.$royal-blue;
	background-color: $-bgc;

	@media (prefers-color-scheme: dark) {
		background-color: color.change(
			color.mix($-bgc, conf.$body-bg--dark),
			$lightness: fibonacci.$asymp-l-percentage +
				fibonacci.$asymp-xl-percentage
		);
	}

	&__container {
		padding: {
			top: 20px;
			bottom: 52px;
		}

		@media (min-width: #{conf.$xxs - 1}) and (max-width: #{conf.$xl - 1}) {
			// Smooth padding change according to layout mockups
			padding: {
				top: func.fluid(20px, 42px, conf.$xxs, conf.$xl);
				bottom: func.fluid(52px, 101px, conf.$xxs, conf.$xl);
			}
		}

		@media (min-width: #{conf.$xl}) {
			padding: {
				top: 42px;
				bottom: 101px;
			}
		}
	}

	&__filler {
		display: grid;
		align-items: center;
		grid-auto-flow: row;
		grid-row-gap: math.div(conf.$grid-gutter-width, 2);

		@media (min-width: #{conf.$xxs - 1}) and (max-width: #{conf.$m - 1}) {
			// Smooth grid-row-gap change according to layout mockups
			grid-row-gap: func.fluid(
				math.div(conf.$grid-gutter-width, 2),
				conf.$grid-gutter-width,
				conf.$xxs,
				conf.$m
			);
		}

		@media (min-width: conf.$m) {
			grid-auto-flow: column;
			grid-template-columns:
				calc(50% - #{math.div(conf.$grid-gutter-width * 0.75, 2)})
				math.div(conf.$grid-gutter-width, 2)
				calc(50% - #{math.div(conf.$grid-gutter-width * 0.75, 2)});
			grid-template-rows:
				1fr
				auto
				conf.$grid-gutter-width * 0.75
				auto
				1fr;
			grid-template-areas:
				".             . throne__media"
				"throne__title . throne__media"
				".             . throne__media"
				"throne__text  . throne__media"
				".             . throne__media";
			grid-row-gap: 0;
		}

		@media (min-width: #{conf.$m + 1}) and (max-width: #{conf.$xl - 1}) {
			grid-template-columns:
				calc(
					49.401709401709402% - #{math.div(
							conf.$grid-gutter-width * 0.75,
							2
						)}
				)
				func.fluid(
					math.div(conf.$grid-gutter-width, 2),
					conf.$grid-gutter-width * 0.75,
					conf.$m,
					conf.$xl
				)
				calc(
					50.598290598290598% - #{math.div(
							conf.$grid-gutter-width * 0.75,
							2
						)}
				);
		}

		// According to the mockups,
		// The left side (title + text) and the right side (image) are not equal.
		// The left side is 566px, right side is 580px, container is 1170px, gap is from 16-to-24px
		// 1170 / 100 => 11.7 is 1%
		// (566 + (gap / 2)) / 11.7 => 49.401709401709402
		// (580 + (gap / 2)) / 11.7 => 50.598290598290598
		// I do not know why the designer has chousen this sizes. Not just 50%... ðŸ¤·
		@media (min-width: conf.$xl) {
			grid-template-columns:
				calc(
					49.401709401709402% - #{math.div(
							conf.$grid-gutter-width * 0.75,
							2
						)}
				)
				conf.$grid-gutter-width * 0.75
				calc(
					50.598290598290598% - #{math.div(
							conf.$grid-gutter-width * 0.75,
							2
						)}
				);
		}
	}

	&__title {
		$-fs--xxs: math.div(23, math.unitless(conf.$font-size-root)) + 0rem;
		$-fs--xl: math.div(35, math.unitless(conf.$font-size-root)) + 0rem;
		$-lh--xxs: math.div(28, 23);
		$-lh--xl: math.div(48, 35);

		@include mix.isomorphic-color-contrast(
			$-bgc,
			conf.$body-color,
			conf.$white
		);

		margin: 0;
		font-weight: 600;
		font-size: $-fs--xxs;
		line-height: $-lh--xxs;

		@media (min-width: #{conf.$xxs + 1}) and (max-width: #{conf.$xl - 1}) {
			// Smooth font-size change according to layout
			font-size: func.fluid(
				math.unitless($-fs--xxs) * conf.$font-size-root,
				math.unitless($-fs--xl) * conf.$font-size-root,
				conf.$xxs,
				conf.$xl
			);

			// Smooth line-height change according to layout
			line-height: func.fluid(
				(math.unitless($-fs--xxs) * $-lh--xxs) * conf.$font-size-root,
				(math.unitless($-fs--xl) * $-lh--xl) * conf.$font-size-root,
				conf.$xxs,
				conf.$xl
			);
		}

		@media (min-width: #{conf.$m}) {
			grid-area: throne__title;
		}

		@media (min-width: conf.$xl) {
			font-size: $-fs--xl;
			line-height: $-lh--xl;
		}

		&-mark {
			@include mix.isomorphic-color-contrast(
				/* Crunch for mockups disign.
				Mockups green color too bright for auto-contrast text color to choose it as white */
					#000,
				conf.$body-color,
				conf.$white
			);

			border-radius: 0.125em;
			-webkit-box-decoration-break: clone;
			box-decoration-break: clone;
			background-color: conf.$lima;
		}
	}

	&__text {
		$-fs--xxs: math.div(14, math.unitless(conf.$font-size-root)) + 0rem;
		$-fs--xl: math.div(23, math.unitless(conf.$font-size-root)) + 0rem;
		$-lh--xxs: math.div(20, 14);
		$-lh--xl: math.div(32, 23);

		@include mix.isomorphic-color-contrast(
			$-bgc,
			conf.$body-color,
			conf.$white
		);

		font-size: $-fs--xxs;
		line-height: $-lh--xxs;
		font-weight: 400;

		@media (min-width: #{conf.$xxs + 1}) and (max-width: #{conf.$xl - 1}) {
			// Smooth font-size change according to layout
			font-size: func.fluid(
				math.unitless($-fs--xxs) * conf.$font-size-root,
				math.unitless($-fs--xl) * conf.$font-size-root,
				conf.$xxs,
				conf.$xl
			);

			// Smooth line-height change according to layout
			line-height: func.fluid(
				(math.unitless($-fs--xxs) * $-lh--xxs) * conf.$font-size-root,
				(math.unitless($-fs--xl) * $-lh--xl) * conf.$font-size-root,
				conf.$xxs,
				conf.$xl
			);
		}

		@media (min-width: #{conf.$m}) {
			grid-area: throne__text;
			font-weight: 500;
		}

		@media (min-width: conf.$xl) {
			font-size: $-fs--xl;
			line-height: $-lh--xl;
		}
	}

	&__paragraph {
		margin: 0;

		&:not(:first-of-type) {
			margin-top: 1em;
		}
		&:not(:last-of-type) {
			margin-bottom: 1em;
		}
	}

	&__media {
		position: relative;

		@media (min-width: #{conf.$m}) {
			grid-area: throne__media;
			display: flex;
			flex-direction: column;
			justify-content: center;
		}
	}

	&__figure {
		margin: 0;
		line-height: 0;
		border-radius: 16px;
	}

	&__label {
		$-bgc: conf.$white;
		$-fs: math.div(11, 16) + 0rem;

		position: absolute;
		background-color: $-bgc;
		border-radius: 8px;
		font-size: $-fs;
		line-height: math.div(16, 11);
		bottom: math.div(conf.$global-padding, 2);
		max-width: calc(50% - #{math.div(conf.$grid-gutter-width, 4)});
		align-items: center;
		display: inline-flex;
		column-gap: math.div(conf.$grid-gutter-width, 8);
		min-height: 40px;

		// Logical padding. Depends on the label font-size
		padding: math.div(
				math.unitless(math.div(conf.$global-padding, 2)),
				math.unitless($-fs * conf.$font-size-root)
			) + 0em;

		@at-root :root:not([dir="rtl"]) & {
			right: math.div(conf.$global-padding, 2);
		}

		@at-root :root[dir="rtl"] & {
			left: math.div(conf.$global-padding, 2);
		}

		@media (min-width: #{conf.$xxs + 1}) and (max-width: #{conf.$xl - 1}) {
			/*
			* Here we just say, depends on the mockups -
			* make the fluid padding-x from 8px-to-16px, that's it.
			* Yeah I know... It looks scary,
			* But we want to respect the parent's font size (em) automatically...
			*/

			padding: math.div(
					math.unitless(math.div(conf.$global-padding, 2)),
					math.unitless($-fs * conf.$font-size-root)
				) + 0em
				func.fluid(
					(
							math.unitless(
									math.div(
											math.unitless(
												math.div(
													conf.$global-padding,
													2
												)
											),
											math.unitless(
												$-fs * conf.$font-size-root
											)
										) + 0em
								) * math.unitless($-fs)
						) * conf.$font-size-root,
					(
							math.unitless(
									math.div(
											math.unitless(conf.$global-padding),
											math.unitless(
												$-fs * conf.$font-size-root
											)
										) + 0em
								) * math.unitless($-fs)
						) * conf.$font-size-root,
					conf.$xxs,
					conf.$xl
				);
		}

		@media (min-width: conf.$xl) {
			padding: math.div(
					math.unitless(math.div(conf.$global-padding, 2)),
					math.unitless($-fs * conf.$font-size-root)
				) + 0em
				math.div(
					math.unitless(conf.$global-padding),
					math.unitless($-fs * conf.$font-size-root)
				) + 0em;
			grid-template-columns: 1fr 32px;
			grid-template-rows: 1fr 32px 1fr;
		}

		&-title {
			@include mix.isomorphic-color-contrast(
				$-bgc,
				conf.$black,
				conf.$white
			);

			font-size: inherit;
			// font-family: "Open Sans", sans-serif;
			margin: 0;
			font-weight: 700;
		}

		&-figure {
			display: flex;
			align-items: center;
			justify-content: center;
			margin: 0;
			line-height: 1;
			height: func.fluid(23.48px, 32px, conf.$xxs, conf.$xl);
			width: func.fluid(23.48px, 32px, conf.$xxs, conf.$xl);
		}

		&-icon {
			object-fit: contain;
			max-height: 100%;
			max-width: 100%;
		}
	}

	&__image {
		display: block;
		width: 100%;
		height: auto;
	}
}
